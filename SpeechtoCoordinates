#This thing actualy works

import serial
import time
from keyboard import press

def file_to_listing(filepath: str) -> list:
    
    # reads file with box names and coordinates
    calibrated_boxes = open(filepath)
    # if not os.path.isabs(calibrated_boxes):
    #    calibrated_boxes = os.path.join(os.path.dirname(sys.argv[0]), calibrated_boxes)
    boxes_info = calibrated_boxes.readlines()
    calibrated_boxes.close()

    #creating empty list for all boxes
    boxes = []

    # Making the list out of the read data from file
    # reads out name and coordinates if formated "coordinate - name" per line
    for line in boxes_info:
        infos = line.split('-')
        #if just one "word" nothing is done
        if len(infos) < 2:
            pass
        else:
            name = infos[1].replace('\n', '')
            coordinates = infos[0] + '\n'
            boxes.append((name, coordinates))

    return boxes

import speech_recognition as sr
import sounddevice as sd
from scipy.io.wavfile import write
import os
import ffmpeg
from scipy.io import wavfile
import numpy as np

def Speech_to_text():
    myfile="output.wav"

    ## If file exists, delete it ##
    if os.path.isfile(myfile):
        os.remove(myfile)
    #else:    ## Show an error ##
        #print("Error: %s file not found" % myfile)
 ##
    R=input("what are you looking for?, press r -> enter to start")
    if R=='r':
        print("recording start")
        fs = 44100  # Sample rate
        seconds = 4  # Duration of recording

        sd.default.dtype='int32', 'int32' 

        myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=2)
        sd.wait()  # Wait until recording is finished
        print("recording ended")
        wavfile.write("output.wav", fs, myrecording)  # Save as WAV file

        r = sr.Recognizer()   #Speech recognition
        audio = sr.AudioFile("output.wav")
        with audio as source:
            #print("Wait. Program Starting")
            audio = r.record(source)
            message = str(r.recognize_google(audio))
            #print("Check: "+message)
    return message

def asking_for_part(boxes: list) -> str:
    '''
    Parameters : boxes, TYPE = list with tuples, with all box names and coordinates :(name, coordinate)
    prints all names from list, ask you to choose one of them
    Returns
    -------
    coordinates_part : STRING
        Coordinates to wished part.
    '''
    #prits all parts in an alphabetic sorted list
    #boxes_names = [thing[0] for thing in boxes]
    coordinates_part = '63,69,90\n'
    boxes_names = []
    index = 0
    for thing in boxes:
        #boxes_names.append(boxes[int(boxes.index(thing))][0])
        boxes_names.append(boxes[index][0])
        index += 1
    boxes_names.sort()

    print('All parts detected:\n')
    #print(boxes_names)
    for name in boxes_names:
        print(name)

    # takes inn part looked for
    #part_desired = input("What are you looking for?")
    part_desired = Speech_to_text()
    print("found string: ", part_desired)
    

    # gets the coordinatestring from the desired part
    part_desired = part_desired.lower()
    found = 0
    for thing in boxes:
        index = int(boxes.index(thing))
        part = boxes[index][0]
        if part == part_desired:
            coordinates_part = boxes[index][1]
            found = 1
            break
    if found == 0:
        print("part not found")

    return coordinates_part


def coordinates_to_arduino(coordinates: str) -> None:
    # opens the connection to ardoinoen
    arduino = serial.Serial(port='COM7', baudrate=115200, timeout=.1)
    # sends the coordinates to ardoino code in utf-8 encoding
    time.sleep(2)
    arduino.write(coordinates.encode("utf-8"))
    # waits for 2 sec
    # closes port
    arduino.close()
    return


if __name__ == "__main__":
    boxes = file_to_listing("C:/Users/svein/OneDrive/Dokumenter/NTNU/Fuzzy/Hylle_vol2.txt")
    
    #print(boxes)
    part = asking_for_part(boxes)
    print(part)
    coordinates_to_arduino(part)
